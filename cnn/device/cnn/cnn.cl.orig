// TODO: Define any constants you'll need
// image is a 28x28xN array (N images) of bytes (each pixel is 8 bit grayscale)

// TODO: If you decide you'd like to write helper functions, you can define them here


// TODO: Build a CNN!
__attribute__((reqd_work_group_size(10000,1,1))) // change this to change workgroup size
__kernel void linear_classifier(global const unsigned char * restrict images, 
								constant float * restrict conv1_weights,
								constant float * restrict conv1_bias,
								constant float * restrict conv2_weights,
								constant float * restrict conv2_bias,
								constant float * restrict dense1_weights,
								constant float * restrict dense1_bias,
								constant float * restrict dense2_weights,
								constant float * restrict dense2_bias,
								global unsigned char * restrict guesses)
{
	/* CONV LAYER 1 */
  printf("%f\n", images[0]);
  //printf("conv1_W_0: %f\n", conv1_weights[0]);
  //printf("conv1_b_0: %f\n", conv1_bias[0]);

	/* MAXPOOL LAYER 1 */

	/* CONV LAYER 2 */
  //printf("conv2_W_0: %f\n", conv2_weights[0]);
  //printf("conv2_b_0: %f\n", conv2_bias[0]);

	/* MAXPOOL LAYER 2 */

	/* DENSE LAYER */
  //printf("dense1_W_0: %f\n", dense1_weights[0]);
  //printf("dense1_b_0: %f\n", dense1_bias[0]);

	/* DENSE 2 */
  //printf("dense2_W_0: %f\n", dense2_weights[0]);
  //printf("dense2_b_0: %f\n", dense2_bias[0]);
	
	/* FINAL GUESS */
	guesses[get_global_id(0)] = 0;
}
